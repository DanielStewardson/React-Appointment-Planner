{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","contacts","setContact","htmlFor","id","onChange","e","target","value","defaultValue","disabled","map","contact","index","name","AppointmentForm","title","setTitle","date","setDate","time","setTime","handleSubmit","onSubmit","type","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","data","tileData","Object","values","className","element","TileList","emptyMessage","length","AppointmentsPage","appointments","addAppointment","useState","childProps","preventDefault","alert","ContactForm","setName","phone","setPhone","email","setEmail","pattern","ContactsPage","addContact","duplicate","setDuplicate","useEffect","forEach","App","setContacts","setAppointments","ROUTES","to","activeClassName","exact","path","prev","appointment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62dd0ff8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({ contacts, setContact }) => {\r\n  return (\r\n    <>\r\n      <label htmlFor='contacts'>Contact:</label>\r\n      <select id='contacts' onChange={(e) => setContact(e.target.value)}>\r\n        <option key='default' defaultValue='' disabled>Select contact details</option>\r\n\r\n          {contacts.map((contact, index) => {\r\n            return (\r\n              <option key={contact.name} value={contact.name}>{contact.name}</option>\r\n            )\r\n          })}\r\n\r\n      </select>\r\n    </>\r\n  );\r\n};","import React from \"react\";\r\nimport { ContactPicker } from '../contactPicker/ContactPicker';\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit\r\n}) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"title\">Appointment name:</label><br/>\r\n      <input type='text' value={title} id='title' onChange={(e) => setTitle(e.target.value)}></input>\r\n\r\n      <label htmlFor=\"date\">Date:</label><br/>\r\n      <input type='date' value={date} id='date' min={getTodayString()} onChange={(e) => setDate(e.target.value)}></input>\r\n\r\n      <label htmlFor=\"time\">Time:</label><br/>\r\n      <input type='time' value={time} id='time' onChange={(e) => setTime(e.target.value)}></input>\r\n\r\n      <ContactPicker contacts={contacts} setContact={setContact} />\r\n\r\n      <input type='submit' value='Add appointment'></input>\r\n    </form>\r\n  );\r\n};","import React from \"react\";\r\n\r\nexport const Tile = ({ data }) => {\r\n  const tileData = Object.values(data);\r\n\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {\r\n        tileData.map((element, index) => {\r\n          if (index === 0){\r\n          return <p key={index} className='tile-title'>{element}</p>\r\n          }\r\n          return <p key={index} className='tile'>{element}</p>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport { Tile } from \"../tile/Tile\";\r\n\r\nexport const TileList = ({ data, emptyMessage }) => {\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div>\r\n         <p>{emptyMessage}</p>\r\n      </div>\r\n      )\r\n  }\r\n  return (\r\n    <div>\r\n      {\r\n        data.map((element, index) => {\r\n          return <Tile key={index} data={element} />\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = ({ appointments, contacts, addAppointment }) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n  const [title, setTitle] = useState('');\r\n  const [contact, setContact] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [time, setTime] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n   if (!title) {\r\n    alert('Set a name for your appointment')\r\n    return;\r\n   } else if (!contact) {\r\n    alert('Who is your appointment with?')\r\n    return;\r\n   } else if (!date || !time) {\r\n    alert('When is your appointment?')\r\n   } else {\r\n    addAppointment(title, contact, date, time);\r\n    setTitle('');\r\n    setContact('');\r\n    setDate('');\r\n    setTime('');\r\n    return;\r\n   }\r\n\r\n  };\r\n\r\n  const childProps = {\r\n    contacts,\r\n    title, setTitle,\r\n    contact, setContact,\r\n    date, setDate,\r\n    time, setTime,\r\n    handleSubmit\r\n  }\r\n\r\n  const emptyMessage = 'Add an appointment';\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm {...childProps} />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList data={appointments} emptyMessage={emptyMessage} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"name\">Name:</label><br/>\r\n      <input type='text' id='name' value={name} onChange={(e) => setName(e.target.value)}></input>\r\n\r\n      <label htmlFor=\"phone\">UK Phone number:</label><br/>\r\n      <input type='tel' id='phone' pattern='[0][0-9]{10}$' value={phone} onChange={(e) => setPhone(e.target.value)}></input>\r\n\r\n      <label htmlFor=\"email\">Email address:</label><br/>\r\n      <input type='email' id='email' value={email} onChange={(e) => setEmail(e.target.value)}></input>\r\n\r\n      <input type='submit' value='Save contact'></input>\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n const [name, setName] = useState('');\r\n const [phone, setPhone] = useState('');\r\n const [email, setEmail] = useState('');\r\n const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if (!name) {\r\n    alert('Enter a contact name!');\r\n    return;\r\n   }\r\n   if (!phone && !email) {\r\n    alert('Enter a phone number or email!');\r\n    return;   \r\n   }\r\n   if (!duplicate) {\r\n    addContact(name, phone, email);\r\n    setName('');\r\n    setPhone('');\r\n    setEmail('');\r\n    return;\r\n   } \r\n   alert('Name already saved in contacts');\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    if (contacts) {\r\n      contacts.forEach(contact => {\r\n        if (contact.name === name) {\r\n          setDuplicate(true);\r\n        } else {\r\n          setDuplicate(false);\r\n        }\r\n      })\r\n    }\r\n  }, [name, contacts])\r\n\r\n  const childProps = {\r\n    name, setName, \r\n    phone, setPhone,\r\n    email, setEmail,\r\n    handleSubmit\r\n  };\r\n\r\n  const emptyMessage = 'Add a contact';\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm {...childProps} />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList data={contacts} emptyMessage={emptyMessage} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n const [contacts, setContacts] = useState([]);\r\n const [appointments, setAppointments] = useState([]);\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n  const addContact = (name, phone, email) => {\r\n    const contact = {\r\n      name: name,\r\n      phone: phone,\r\n      email: email\r\n    };\r\n    setContacts(prev => [...prev, contact]);\r\n  };\r\n\r\n  const addAppointment = (title, contact, date, time) => {\r\n    const appointment = {\r\n      title: title,\r\n      contact: contact,\r\n      date: date,\r\n      time: time\r\n    };\r\n    setAppointments(prev => [...prev, appointment]);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage contacts={contacts} addContact={addContact} />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage appointments={appointments} contacts={contacts} addAppointment={addAppointment} />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}